{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
      "appName": {
        "type": "string"
      },
      "functionKey": {
        "type" : "string",
        "defaultValue": "j0txf1f8msjytzvpe40nxbpxdcxtqcgxy0nt",
        "metadata": {
          "description" : "Function App Key to use for authorization of Webhook"
        }
      },
      "sourceCodeRepositoryURL": {
        "type": "string",
        "defaultValue": "https://github.com/Azure-Samples/media-services-dotnet-functions-integration",
        "metadata": {
          "description": "Source code repository URL."
        }
      },
      "sourceCodeBranch": {
        "type": "string",
        "defaultValue": "master",
        "metadata": {
          "description": "Sourcecode Repo branch"
        }
      },
      "sourceCodeManualIntegration": {
          "type": "bool",
          "defaultValue": true,
          "metadata": {
              "description": "Use 'true' if you are deploying from the base repo, 'false' if you are deploying from your own fork. If you're using 'false', make sure you have admin permissions to the repo. If you get an error, you should add GitHub integration to another web app manually, so that you get a GitHub access token associated with your Azure Subscription."
          }
      }
  },
  "variables": {
    "lowerAppName": "[toLower(parameters('appName'))]",
    "nameSuffix": "[substring(uniqueString(resourceGroup().id), 0, 6)]",
    "appServicePlanName": "[concat(variables('lowerAppName'),'-serviceplan')]",
    "storageAccountid" : "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]",
    "logicAppName": "[concat(parameters('appName'),'-logicapp')]",
    "mediaServiceName" : "[toLower(concat(parameters('appName'),'media'))]",
    "functionAppName": "[concat(variables('lowerAppName'),'-functions')]",
    "storageAccountName": "[concat(variables('lowerAppName'),variables('nameSuffix'))]",
    "hostingPlanName" : "[concat(variables('lowerAppName'),concat(variables('nameSuffix'),'-hostingplan'))]",
    "storageLocation":"[resourceGroup().location]",
    "storageAccountType": "Standard_LRS"
  },
  "resources": [
      {
          "type": "Microsoft.Storage/storageAccounts",
          "name": "[variables('storageAccountName')]",
          "apiVersion": "2015-05-01-preview",
          "location": "[variables('storageLocation')]",
          "properties": {
              "accountType": "[variables('storageAccountType')]"
          }
      },
      {
          "type": "Microsoft.Web/serverfarms",
          "apiVersion": "2015-04-01",
          "name": "[variables('hostingPlanName')]",
          "location": "[resourceGroup().location]",
          "kind" : "functionapp",
          "properties": {
              "name": "[variables('hostingPlanName')]",
              "computeMode": "0"
          },
           "sku": {
            "name": "Y1",
            "tier": "Dynamic",
            "size": "Y1",
            "family": "Y",
            "capacity": 0
          }
      },
      {
        "apiVersion": "2015-10-01",
        "name": "[variables('mediaServiceName')]",
        "type": "Microsoft.Media/mediaservices",
        "location": "[resourceGroup().location]",
        "properties": {
          "storageAccounts": [{
            "id": "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]",
            "isPrimary": true
        }]
      },
        "dependsOn": [
          "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]"
        ]
      },
      {
          "type": "Microsoft.Web/sites",
          "kind": "functionapp",
          "name": "[variables('functionAppName')]",
          "apiVersion": "2015-08-01",
          "location": "[resourceGroup().location]",
          "dependsOn": [
            "[resourceId('Microsoft.Media/mediaservices', variables('mediaServiceName'))]",
            "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]",
            "[resourceId('Microsoft.Web/serverfarms', variables('hostingPlanName'))]"
          ],
          "properties": {
            "serverFarmId": "[variables('hostingPlanName')]",
            "siteConfig": {
                "alwaysOn": true,
                "appSettings": [
                    { "name": "FUNCTIONS_EXTENSION_VERSION", "value": "~1" }
                ]
            }
          },
          "resources": [
            {
                "apiVersion": "2015-08-01",
                "name": "appsettings",
                "type": "config",
                "dependsOn": [
                  "[resourceId('Microsoft.Web/serverfarms', variables('hostingPlanName'))]",
                  "[resourceId('Microsoft.Web/Sites', variables('functionAppName'))]",
                  "[resourceId('Microsoft.Web/Sites/sourcecontrols', variables('functionAppName'), 'web')]",
                  "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]"
                ],
                "properties": {
                  "FUNCTIONS_EXTENSION_VERSION": "~1",
                  "WEBSITE_NODE_DEFAULT_VERSION": "6.5.0",
                  "AzureWebJobsStorage": "[concat('DefaultEndpointsProtocol=https;AccountName=', variables('storageAccountName'), ';AccountKey=', listKeys(variables('storageAccountid'),'2015-05-01-preview').key1)]",
                  "AzureWebJobsDashboard": "[concat('DefaultEndpointsProtocol=https;AccountName=', variables('storageAccountName'), ';AccountKey=', listKeys(variables('storageAccountid'),'2015-05-01-preview').key1)]",
                  "AMSAccount": "[variables('mediaServiceName')]",
                  "AMSKey": "[listKeys(variables('mediaServiceName'),'2015-10-01').primaryKey]",
                  "MediaServicesStorageAccountName": "[variables('storageAccountName')]",
                  "MediaServicesStorageAccountKey": "[listKeys(variables('storageAccountid'),'2015-05-01-preview').key1]",
                  "StorageConnection": "[concat('DefaultEndpointsProtocol=https;AccountName=', variables('storageAccountName'), ';AccountKey=', listKeys(variables('storageAccountid'),'2015-05-01-preview').key1)]",
                  "SigningKey": "wOlDEUJ4/VN1No8HxVxpsRvej0DZrO5DXvImGLjFhfctPGFiMkUA0Cj8HSfJW7lePX9XsfHAMhw30p0yYqG+1A==",
                  "WebHookEndpoint": "[concat(resourceId('Microsoft.Web/sites', variables('functionAppName')),'/api/Notification_Webhook_Function?code=', parameters('functionKey'))]"
                }
            },
            {
                  "apiVersion": "2015-08-01",
                  "name": "web",
                  "type": "sourcecontrols",
                  "dependsOn": [
                    "[resourceId('Microsoft.Web/sites/', variables('functionAppName'))]"
                  ],
                  "properties": {
                    "RepoUrl": "[parameters('sourceCodeRepositoryURL')]",
                    "branch": "[parameters('sourceCodeBranch')]",
                    "IsManualIntegration": "[parameters('sourceCodeManualIntegration')]"
                  }
            }
        ]
      }
  ],
  "outputs": {}
}